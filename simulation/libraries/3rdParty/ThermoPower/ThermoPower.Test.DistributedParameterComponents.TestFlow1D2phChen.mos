// name: ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phC
// keywords: over-determined initialization
// status: correct

// Test5
loadModel(ThermoPower); getErrorString();
simulate(ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phChen); getErrorString();

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phChen_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1000.0, numberOfIntervals = 500, tolerance = 1e-08, method = 'dassl', fileNamePrefix = 'ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phChen', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "stdout            | warning | While solving non-linear system an assertion failed during initialization.
// |                 | |       | | The non-linear solver tries to solve the problem that could take some time.
// |                 | |       | | It could help to provide better start-values for the iteration variables.
// |                 | |       | | For more information simulate with -lv LOG_NLS
// "
// end SimulationResult;
// "Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[8](nominal = 300.0)
//  * candidate: hex.wall.T[8](nominal = 300.0)
//  * candidate: hex.T[8](nominal = 500.0)
//  * candidate: hex.fluidState[8].T(nominal = 500.0)
// => select value from hex.T[8](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature200
// Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[7](nominal = 300.0)
//  * candidate: hex.wall.T[7](nominal = 300.0)
//  * candidate: hex.T[7](nominal = 500.0)
//  * candidate: hex.fluidState[7].T(nominal = 500.0)
// => select value from hex.T[7](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature196
// Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[6](nominal = 300.0)
//  * candidate: hex.wall.T[6](nominal = 300.0)
//  * candidate: hex.T[6](nominal = 500.0)
//  * candidate: hex.fluidState[6].T(nominal = 500.0)
// => select value from hex.T[6](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature192
// Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[5](nominal = 300.0)
//  * candidate: hex.wall.T[5](nominal = 300.0)
//  * candidate: hex.T[5](nominal = 500.0)
//  * candidate: hex.fluidState[5].T(nominal = 500.0)
// => select value from hex.T[5](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature188
// Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[4](nominal = 300.0)
//  * candidate: hex.wall.T[4](nominal = 300.0)
//  * candidate: hex.T[4](nominal = 500.0)
//  * candidate: hex.fluidState[4].T(nominal = 500.0)
// => select value from hex.T[4](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature184
// Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[3](nominal = 300.0)
//  * candidate: hex.wall.T[3](nominal = 300.0)
//  * candidate: hex.T[3](nominal = 500.0)
//  * candidate: hex.fluidState[3].T(nominal = 500.0)
// => select value from hex.T[3](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature180
// Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[2](nominal = 300.0)
//  * candidate: hex.wall.T[2](nominal = 300.0)
//  * candidate: hex.T[2](nominal = 500.0)
//  * candidate: hex.fluidState[2].T(nominal = 500.0)
// => select value from hex.T[2](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature176
// Warning: Alias set with different nominal values
//  * candidate: htFluid.fluidside.T[1](nominal = 300.0)
//  * candidate: hex.wall.T[1](nominal = 300.0)
//  * candidate: hex.T[1](nominal = 500.0)
//  * candidate: hex.fluidState[1].T(nominal = 500.0)
// => select value from hex.T[1](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phChen$hex$PMedium$Ptemperature172
// Warning: Alias set with several free start values
//  * candidate: hex.h[1](start = hex.hstart[1])
//  * candidate: Source.flange.h_outflow(start = 100000.0)
//  * candidate: hex.fluidState[1].h(start = 100000.0)
// => select value from hex.h[1](start = hex.hstart[1]) for variable: hex.h[1]
// Warning: Alias set with several free start values
//  * candidate: hex.p(start = hex.pstart)
//  * candidate: hex.outfl.p(start = 5000000.0)
//  * candidate: valve.inlet.p(start = 5000000.0)
//  * candidate: hex.fluidState[8].p(start = 5000000.0)
//  * candidate: hex.fluidState[7].p(start = 5000000.0)
//  * candidate: hex.fluidState[6].p(start = 5000000.0)
//  * candidate: hex.fluidState[5].p(start = 5000000.0)
//  * candidate: hex.fluidState[4].p(start = 5000000.0)
//  * candidate: hex.fluidState[3].p(start = 5000000.0)
//  * candidate: hex.fluidState[2].p(start = 5000000.0)
//  * candidate: hex.fluidState[1].p(start = 5000000.0)
// => select value from hex.p(start = hex.pstart) for variable: hex.p
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[7](start = hex.hstart[8])
//  * candidate: hex.h[8](start = hex.hstart[8])
//  * candidate: hex.fluidState[8].h(start = 100000.0)
//  * candidate: hex.outfl.h_outflow(start = hex.hstartout)
//  * candidate: valve.outlet.h_outflow(start = 100000.0)
// => select value from hex.htilde[7](start = hex.hstart[8]) for variable: hex.htilde[7]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[6](start = hex.hstart[7])
//  * candidate: hex.h[7](start = hex.hstart[7])
//  * candidate: hex.fluidState[7].h(start = 100000.0)
// => select value from hex.htilde[6](start = hex.hstart[7]) for variable: hex.htilde[6]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[5](start = hex.hstart[6])
//  * candidate: hex.h[6](start = hex.hstart[6])
//  * candidate: hex.fluidState[6].h(start = 100000.0)
// => select value from hex.htilde[5](start = hex.hstart[6]) for variable: hex.htilde[5]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[4](start = hex.hstart[5])
//  * candidate: hex.h[5](start = hex.hstart[5])
//  * candidate: hex.fluidState[5].h(start = 100000.0)
// => select value from hex.htilde[4](start = hex.hstart[5]) for variable: hex.htilde[4]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[3](start = hex.hstart[4])
//  * candidate: hex.h[4](start = hex.hstart[4])
//  * candidate: hex.fluidState[4].h(start = 100000.0)
// => select value from hex.htilde[3](start = hex.hstart[4]) for variable: hex.htilde[3]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[2](start = hex.hstart[3])
//  * candidate: hex.h[3](start = hex.hstart[3])
//  * candidate: hex.fluidState[3].h(start = 100000.0)
// => select value from hex.htilde[2](start = hex.hstart[3]) for variable: hex.htilde[2]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[1](start = hex.hstart[2])
//  * candidate: hex.h[2](start = hex.hstart[2])
//  * candidate: hex.fluidState[2].h(start = 100000.0)
//  * candidate: hex.infl.h_outflow(start = hex.hstartin)
// => select value from hex.htilde[1](start = hex.hstart[2]) for variable: hex.htilde[1]
// Warning: Alias set with several free start values
//  * candidate: hex.p(start = hex.pstart)
//  * candidate: Source.flange.p(start = 5000000.0)
// => select value from hex.p(start = hex.pstart) for variable: hex.p
// "
// endResult
