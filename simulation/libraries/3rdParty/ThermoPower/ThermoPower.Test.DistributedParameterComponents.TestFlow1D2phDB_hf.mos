// name: ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phDB_hf
// keywords: over-determined initialization
// status: correct

// Test2
loadModel(ThermoPower); getErrorString();
simulate(ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phDB_hf); getErrorString();

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phDB_hf_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 300.0, numberOfIntervals = 500, tolerance = 1e-07, method = 'dassl', fileNamePrefix = 'ThermoPower.Test.DistributedParameterComponents.TestFlow1D2phDB_hf', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[10](nominal = 300.0)
//  * candidate: hex.wall.T[10](nominal = 300.0)
//  * candidate: hex.T[10](nominal = 500.0)
//  * candidate: hex.fluidState[10].T(nominal = 500.0)
// => select value from hex.T[10](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature83
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[9](nominal = 300.0)
//  * candidate: hex.wall.T[9](nominal = 300.0)
//  * candidate: hex.T[9](nominal = 500.0)
//  * candidate: hex.fluidState[9].T(nominal = 500.0)
// => select value from hex.T[9](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature79
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[8](nominal = 300.0)
//  * candidate: hex.wall.T[8](nominal = 300.0)
//  * candidate: hex.T[8](nominal = 500.0)
//  * candidate: hex.fluidState[8].T(nominal = 500.0)
// => select value from hex.T[8](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature75
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[7](nominal = 300.0)
//  * candidate: hex.wall.T[7](nominal = 300.0)
//  * candidate: hex.T[7](nominal = 500.0)
//  * candidate: hex.fluidState[7].T(nominal = 500.0)
// => select value from hex.T[7](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature71
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[6](nominal = 300.0)
//  * candidate: hex.wall.T[6](nominal = 300.0)
//  * candidate: hex.T[6](nominal = 500.0)
//  * candidate: hex.fluidState[6].T(nominal = 500.0)
// => select value from hex.T[6](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature67
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[5](nominal = 300.0)
//  * candidate: hex.wall.T[5](nominal = 300.0)
//  * candidate: hex.T[5](nominal = 500.0)
//  * candidate: hex.fluidState[5].T(nominal = 500.0)
// => select value from hex.T[5](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature63
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[4](nominal = 300.0)
//  * candidate: hex.wall.T[4](nominal = 300.0)
//  * candidate: hex.T[4](nominal = 500.0)
//  * candidate: hex.fluidState[4].T(nominal = 500.0)
// => select value from hex.T[4](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature59
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[3](nominal = 300.0)
//  * candidate: hex.wall.T[3](nominal = 300.0)
//  * candidate: hex.T[3](nominal = 500.0)
//  * candidate: hex.fluidState[3].T(nominal = 500.0)
// => select value from hex.T[3](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature55
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[2](nominal = 300.0)
//  * candidate: hex.wall.T[2](nominal = 300.0)
//  * candidate: hex.T[2](nominal = 500.0)
//  * candidate: hex.fluidState[2].T(nominal = 500.0)
// => select value from hex.T[2](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature51
// Warning: Alias set with different nominal values
//  * candidate: heatSource.wall.T[1](nominal = 300.0)
//  * candidate: hex.wall.T[1](nominal = 300.0)
//  * candidate: hex.T[1](nominal = 500.0)
//  * candidate: hex.fluidState[1].T(nominal = 500.0)
// => select value from hex.T[1](nominal = 500.0) for variable: T$$PThermoPower$PWater$PFlow1D2phDB$hex$PMedium$Ptemperature47
// Warning: Alias set with several free start values
//  * candidate: hex.h[1](start = hex.hstart[1])
//  * candidate: Source.flange.h_outflow(start = 100000.0)
//  * candidate: hex.fluidState[1].h(start = 100000.0)
// => select value from hex.h[1](start = hex.hstart[1]) for variable: hex.h[1]
// Warning: Alias set with several free start values
//  * candidate: hex.p(start = hex.pstart)
//  * candidate: hex.outfl.p(start = 5000000.0)
//  * candidate: valve.inlet.p(start = 5000000.0)
//  * candidate: hex.fluidState[10].p(start = 5000000.0)
//  * candidate: hex.fluidState[9].p(start = 5000000.0)
//  * candidate: hex.fluidState[8].p(start = 5000000.0)
//  * candidate: hex.fluidState[7].p(start = 5000000.0)
//  * candidate: hex.fluidState[6].p(start = 5000000.0)
//  * candidate: hex.fluidState[5].p(start = 5000000.0)
//  * candidate: hex.fluidState[4].p(start = 5000000.0)
//  * candidate: hex.fluidState[3].p(start = 5000000.0)
//  * candidate: hex.fluidState[2].p(start = 5000000.0)
//  * candidate: hex.fluidState[1].p(start = 5000000.0)
// => select value from hex.p(start = hex.pstart) for variable: hex.p
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[9](start = hex.hstart[10])
//  * candidate: hex.h[10](start = hex.hstart[10])
//  * candidate: hex.fluidState[10].h(start = 100000.0)
//  * candidate: hex.outfl.h_outflow(start = hex.hstartout)
//  * candidate: valve.outlet.h_outflow(start = 100000.0)
// => select value from hex.htilde[9](start = hex.hstart[10]) for variable: hex.htilde[9]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[8](start = hex.hstart[9])
//  * candidate: hex.h[9](start = hex.hstart[9])
//  * candidate: hex.fluidState[9].h(start = 100000.0)
// => select value from hex.htilde[8](start = hex.hstart[9]) for variable: hex.htilde[8]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[7](start = hex.hstart[8])
//  * candidate: hex.h[8](start = hex.hstart[8])
//  * candidate: hex.fluidState[8].h(start = 100000.0)
// => select value from hex.htilde[7](start = hex.hstart[8]) for variable: hex.htilde[7]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[6](start = hex.hstart[7])
//  * candidate: hex.h[7](start = hex.hstart[7])
//  * candidate: hex.fluidState[7].h(start = 100000.0)
// => select value from hex.htilde[6](start = hex.hstart[7]) for variable: hex.htilde[6]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[5](start = hex.hstart[6])
//  * candidate: hex.h[6](start = hex.hstart[6])
//  * candidate: hex.fluidState[6].h(start = 100000.0)
// => select value from hex.htilde[5](start = hex.hstart[6]) for variable: hex.htilde[5]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[4](start = hex.hstart[5])
//  * candidate: hex.h[5](start = hex.hstart[5])
//  * candidate: hex.fluidState[5].h(start = 100000.0)
// => select value from hex.htilde[4](start = hex.hstart[5]) for variable: hex.htilde[4]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[3](start = hex.hstart[4])
//  * candidate: hex.h[4](start = hex.hstart[4])
//  * candidate: hex.fluidState[4].h(start = 100000.0)
// => select value from hex.htilde[3](start = hex.hstart[4]) for variable: hex.htilde[3]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[2](start = hex.hstart[3])
//  * candidate: hex.h[3](start = hex.hstart[3])
//  * candidate: hex.fluidState[3].h(start = 100000.0)
// => select value from hex.htilde[2](start = hex.hstart[3]) for variable: hex.htilde[2]
// Warning: Alias set with several free start values
//  * candidate: hex.htilde[1](start = hex.hstart[2])
//  * candidate: hex.h[2](start = hex.hstart[2])
//  * candidate: hex.fluidState[2].h(start = 100000.0)
//  * candidate: hex.infl.h_outflow(start = hex.hstartin)
// => select value from hex.htilde[1](start = hex.hstart[2]) for variable: hex.htilde[1]
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.p = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[1] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[2] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[3] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[4] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[5] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[6] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[7] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[8] = 0.0
// Notification: The following equation is consistent and got removed from the initialization problem: $DER.hex.htilde[9] = 0.0
// Warning: The initial conditions are over specified. Use +d=initialization for more information.
// "
// endResult
