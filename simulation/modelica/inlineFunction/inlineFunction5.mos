// name: inlineFunction5
// status: correct

loadString("
model foo

  record A
    Real a;
    Real b;
  end A;

  function f
    input A x;
    input Real[:] z;
    output Real y;
    output Real y1;
  protected
    Real a[2];
  algorithm
     a[1] := f1(z[1]);
     a[2] := f1(z[2]);
     y := sum(a)*x.a + sum(z);
     y1 := sum(a)*x.b + y + sum(z);
    annotation(Inline=true); 
  end f;

  function f1
    input Real y;
    output Real x;
  protected
    Real y1 = 2*y + 7;
    Real[2] z = {2*y1, y*y1};
  algorithm
    x := sum(z)*sum(z)*y1*y;
    annotation(Inline=true); 
  end f1;

  Real y(start=0,fixed=true);
  Real dy = der(y);
  Real y1,y2;
  Real[:] z =  {time, cos(time), exp(-time)};
equation
 der(y) + 1 = f(A(5 + time,3), z);
 (y1,y2) = f(A(5 + time,3), z);
end foo;
");
getErrorString();
setCommandLineOptions("+d=dumpBackendInline");
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// ""
// true
//
// ############ BackendInline ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (31)
// ========================================
// 1: x$$Pfoo$Pf115:VARIABLE()  type: Real
// 2: y1$$Pfoo$Pf116:VARIABLE()  type: Real
// 3: z$$Pfoo$Pf117[1]:VARIABLE()  type: Real [2]
// 4: z$$Pfoo$Pf117[2]:VARIABLE()  type: Real [2]
// 5: x$$Pfoo$Pf112:VARIABLE()  type: Real
// 6: y1$$Pfoo$Pf113:VARIABLE()  type: Real
// 7: z$$Pfoo$Pf114[1]:VARIABLE()  type: Real [2]
// 8: z$$Pfoo$Pf114[2]:VARIABLE()  type: Real [2]
// 9: x$$Pfoo$Pf19:VARIABLE()  type: Real
// 10: y1$$Pfoo$Pf110:VARIABLE()  type: Real
// 11: z$$Pfoo$Pf111[1]:VARIABLE()  type: Real [2]
// 12: z$$Pfoo$Pf111[2]:VARIABLE()  type: Real [2]
// 13: x$$Pfoo$Pf16:VARIABLE()  type: Real
// 14: y1$$Pfoo$Pf17:VARIABLE()  type: Real
// 15: z$$Pfoo$Pf18[1]:VARIABLE()  type: Real [2]
// 16: z$$Pfoo$Pf18[2]:VARIABLE()  type: Real [2]
// 17: y$$Pfoo$Pf3:VARIABLE()  type: Real
// 18: y1$$Pfoo$Pf4:VARIABLE()  type: Real
// 19: a$$Pfoo$Pf5[1]:VARIABLE()  type: Real [2]
// 20: a$$Pfoo$Pf5[2]:VARIABLE()  type: Real [2]
// 21: y$$Pfoo$Pf0:VARIABLE()  type: Real
// 22: y1$$Pfoo$Pf1:VARIABLE()  type: Real
// 23: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 24: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
// 25: z[3]:VARIABLE() .foo, .Real type: Real [3]
// 26: z[2]:VARIABLE() .foo, .Real type: Real [3]
// 27: z[1]:VARIABLE() .foo, .Real type: Real [3]
// 28: y2:VARIABLE() .foo, .Real type: Real
// 29: y1:VARIABLE() .foo, .Real type: Real
// 30: dy:VARIABLE() .foo, .Real type: Real
// 31: y:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (28, 31)
// ========================================
// 1/1 (1): dy = der(y)   [binding]
// 2/2 (3): z = {time, cos(time), exp(-time)}   [dynamic]
// 3/5 (1): (1.0 + dy, _) = (y$$Pfoo$Pf0, y1$$Pfoo$Pf1)   [dynamic]
// 4/6 (2): (y1, y2) = (y$$Pfoo$Pf3, y1$$Pfoo$Pf4)   [dynamic]
// 5/8 (1): y1$$Pfoo$Pf1 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * 3.0 + y$$Pfoo$Pf0 + sum({z[1], z[2], z[3]})   [unknown]
// 6/9 (1): y$$Pfoo$Pf0 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * (5.0 + time) + sum({z[1], z[2], z[3]})   [unknown]
// 7/10 (1): a$$Pfoo$Pf2[2] = x$$Pfoo$Pf16   [unknown]
// 8/11 (1): a$$Pfoo$Pf2[1] = x$$Pfoo$Pf19   [unknown]
// 9/12 (1): y1$$Pfoo$Pf4 = (a$$Pfoo$Pf5[1] + a$$Pfoo$Pf5[2]) * 3.0 + y$$Pfoo$Pf3 + sum({z[1], z[2], z[3]})   [unknown]
// 10/13 (1): y$$Pfoo$Pf3 = (a$$Pfoo$Pf5[1] + a$$Pfoo$Pf5[2]) * (5.0 + time) + sum({z[1], z[2], z[3]})   [unknown]
// 11/14 (1): a$$Pfoo$Pf5[2] = x$$Pfoo$Pf112   [unknown]
// 12/15 (1): a$$Pfoo$Pf5[1] = x$$Pfoo$Pf115   [unknown]
// 13/16 (1): x$$Pfoo$Pf16 = (z$$Pfoo$Pf18[1] + z$$Pfoo$Pf18[2]) ^ 2.0 * y1$$Pfoo$Pf17 * z[2]   [unknown]
// 14/17 (1): z$$Pfoo$Pf18[2] = z[2] * y1$$Pfoo$Pf17   [unknown]
// 15/18 (1): z$$Pfoo$Pf18[1] = 2.0 * y1$$Pfoo$Pf17   [unknown]
// 16/19 (1): y1$$Pfoo$Pf17 = 7.0 + 2.0 * z[2]   [unknown]
// 17/20 (1): x$$Pfoo$Pf19 = (z$$Pfoo$Pf111[1] + z$$Pfoo$Pf111[2]) ^ 2.0 * y1$$Pfoo$Pf110 * z[1]   [unknown]
// 18/21 (1): z$$Pfoo$Pf111[2] = z[1] * y1$$Pfoo$Pf110   [unknown]
// 19/22 (1): z$$Pfoo$Pf111[1] = 2.0 * y1$$Pfoo$Pf110   [unknown]
// 20/23 (1): y1$$Pfoo$Pf110 = 7.0 + 2.0 * z[1]   [unknown]
// 21/24 (1): x$$Pfoo$Pf112 = (z$$Pfoo$Pf114[1] + z$$Pfoo$Pf114[2]) ^ 2.0 * y1$$Pfoo$Pf113 * z[2]   [unknown]
// 22/25 (1): z$$Pfoo$Pf114[2] = z[2] * y1$$Pfoo$Pf113   [unknown]
// 23/26 (1): z$$Pfoo$Pf114[1] = 2.0 * y1$$Pfoo$Pf113   [unknown]
// 24/27 (1): y1$$Pfoo$Pf113 = 7.0 + 2.0 * z[2]   [unknown]
// 25/28 (1): x$$Pfoo$Pf115 = (z$$Pfoo$Pf117[1] + z$$Pfoo$Pf117[2]) ^ 2.0 * y1$$Pfoo$Pf116 * z[1]   [unknown]
// 26/29 (1): z$$Pfoo$Pf117[2] = z[1] * y1$$Pfoo$Pf116   [unknown]
// 27/30 (1): z$$Pfoo$Pf117[1] = 2.0 * y1$$Pfoo$Pf116   [unknown]
// 28/31 (1): y1$$Pfoo$Pf116 = 7.0 + 2.0 * z[1]   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 4
// 1: 7 6
// 2: 3 2 1
// 3: 1 2 3 6
// 4: 1 2 3 4 5
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 7
// 1: 4 3 2
// 2: 4 3 2
// 3: 4 3 2
// 4: 4
// 5: 4
// 6: 3 1
// 7: 1
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.0,17301.90025334362,37490.19975223122}
// endResult
