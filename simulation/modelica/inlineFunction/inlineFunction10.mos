// name: inlineFunction10
// status: correct

// use new inline method
setCommandLineOptions("+inlineMethod=append");

loadString("
model foo
  function f
    input Real z;
    output Real y[1];
  algorithm
     y := {2*z-1};
    annotation(Inline=true); 
  end f;

  Real x(start=0,fixed=true);
  Real y;
equation
  {0.0} = f(y);
  der(x) = y+time;
end foo;
");
getErrorString();

setCommandLineOptions("+d=dumpBackendInline");
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// true
// ""
// true
//
// ############ BackendInline Method: append ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: y$$Pfoo$Pf0[1]:VARIABLE()  type: Real [1]
// 2: y:VARIABLE() .foo, .Real type: Real
// 3: x:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): {0.0} = y$$Pfoo$Pf0   [dynamic]
// 2/2 (1): der(x) = y + time   [dynamic]
// 3/3 (1): y$$Pfoo$Pf0[1] = -1.0 + 2.0 * y   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 2
// 1: 1
// 2: 1 2
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 2
// 1: 2 1
// 2: 2
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.5,0.5,0.5}
// endResult
