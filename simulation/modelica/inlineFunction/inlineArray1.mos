// name: inlineArray1
// status: correct

// use new inline method
setCommandLineOption("+inlineMethod=append");

loadString("
model foo
  function f
    input Real[5] x;
    output Real[7] y;
  protected
    Real sumx = exp(-sqrt(sum(x)));
	Real tmpy;
  algorithm
    y[1] := sumx^2;
	y[2] := 2*sumx^2;
	y[3] := 3*sumx^2;
	y[4] := 4*sumx^2;
	y[5] := 5*sumx^2;
	y[6] := 6*sumx^2;
	tmpy := 7*sumx^2;
	y[7] := exp(-sqrt(tmpy/sum(y[i] for i in 1:6))/tmpy);
    annotation(Inline=true); 
  end f;
  Real y(fixed = true, start = 0);
protected
  Real[5] a;
  Real c;

  Real[5] x;
  Real[:] z = {i*sin(time) + 1 for i in 1:10};
equation
   x[1] = a[1] + a[2];
   x[2] = z[1] + a[1];
   x[3] = z[2] + a[3] + a[1] + 2*a[2] + sum(z);
   x[4] = z[2] + a[3] + a[1] + 2*a[2];
   x[5] = z[2] + x[3] + a[1] + 2*a[2] + cos(sum(a));
   a[1] = sum(f(x))/10;
   a[2] = sum(f(z[1:5]))/10;
   a[3] = sum(f(z[6:10]))/10;
   a[4] = sum(f(z[2:6]))/10;
   a[5] = sum(f(z[3:7]))/10;
   c = exp(-sum(f(a)));
   der(y) = sin(c) - cos(sum(f(x))) + sum(a)/10;  
end foo;
");
getErrorString();

setCommandLineOptions("+d=dumpBackendInline");
getErrorString();
simulate(foo);
getErrorString();
val(y,{0,0.5,1.0}); // 0, -1// Result:
//
// true
// "[simulation/modelica/inlineFunction/inlineArray1.mos:5:1-5:45:writable] Error: Class setCommandLineOption not found in scope <global scope> (looking for a function or record).
// "
// true
// ""
//
// ############ BackendInline ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (22)
// ========================================
// 1: z[10]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 2: z[9]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 3: z[8]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 4: z[7]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 5: z[6]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 6: z[5]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 7: z[4]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 8: z[3]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 9: z[2]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 10: z[1]:VARIABLE(protected = true ) .foo, .Real type: Real [10]
// 11: x[5]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 12: x[4]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 13: x[3]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 14: x[2]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 15: x[1]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 16: c:VARIABLE(protected = true ) .foo, .Real type: Real
// 17: a[5]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 18: a[4]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 19: a[3]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 20: a[2]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 21: a[1]:VARIABLE(protected = true ) .foo, .Real type: Real [5]
// 22: y:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (13, 22)
// ========================================
// 1/1 (10): z = {1.0 + sin(time), 1.0 + 2.0 * sin(time), 1.0 + 3.0 * sin(time), 1.0 + 4.0 * sin(time), 1.0 + 5.0 * sin(time), 1.0 + 6.0 * sin(time), 1.0 + 7.0 * sin(time), 1.0 + 8.0 * sin(time), 1.0 + 9.0 * sin(time), 1.0 + 10.0 * sin(time)}   [dynamic]
// 2/11 (1): x[1] = a[1] + a[2]   [dynamic]
// 3/12 (1): x[2] = z[1] + a[1]   [dynamic]
// 4/13 (1): x[3] = 2.0 * z[2] + a[3] + a[1] + 2.0 * a[2] + z[1] + z[3] + z[4] + z[5] + z[6] + z[7] + z[8] + z[9] + z[10]   [dynamic]
// 5/14 (1): x[4] = z[2] + a[3] + a[1] + 2.0 * a[2]   [dynamic]
// 6/15 (1): x[5] = z[2] + x[3] + a[1] + 2.0 * a[2] + cos(a[1] + a[2] + a[3] + a[4] + a[5])   [dynamic]
// 7/16 (1): a[1] = 0.1 * sum(foo.f({x[1], x[2], x[3], x[4], x[5]}))   [dynamic]
// 8/17 (1): a[2] = 0.1 * sum(foo.f({z[1], z[2], z[3], z[4], z[5]}))   [dynamic]
// 9/18 (1): a[3] = 0.1 * sum(foo.f({z[6], z[7], z[8], z[9], z[10]}))   [dynamic]
// 10/19 (1): a[4] = 0.1 * sum(foo.f({z[2], z[3], z[4], z[5], z[6]}))   [dynamic]
// 11/20 (1): a[5] = 0.1 * sum(foo.f({z[3], z[4], z[5], z[6], z[7]}))   [dynamic]
// 12/21 (1): c = exp(-sum(foo.f({a[1], a[2], a[3], a[4], a[5]})))   [dynamic]
// 13/22 (1): der(y) = sin(c) + 0.1 * (a[1] + a[2] + a[3] + a[4] + a[5]) - cos(sum(foo.f({x[1], x[2], x[3], x[4], x[5]})))   [dynamic]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 13
// 1: 10 9 8 7 6 5 4 3 2 1
// 2: 20 21 15
// 3: 21 10 14
// 4: 1 2 3 4 5 6 7 8 10 20 21 19 9 13
// 5: 20 21 19 9 12
// 6: 17 18 19 20 21 13 9 11
// 7: 11 12 13 14 15 21
// 8: 6 7 8 9 10 20
// 9: 1 2 3 4 5 19
// 10: 5 6 7 8 9 18
// 11: 4 5 6 7 8 17
// 12: 17 18 19 20 21 16
// 13: 11 12 13 14 15 17 18 19 20 21 16 22
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 22
// 1: 9 4 1
// 2: 9 4 1
// 3: 9 4 1
// 4: 11 9 4 1
// 5: 11 10 9 4 1
// 6: 11 10 8 4 1
// 7: 11 10 8 4 1
// 8: 11 10 8 4 1
// 9: 10 8 6 5 4 1
// 10: 8 4 3 1
// 11: 13 7 6
// 12: 13 7 5
// 13: 13 7 6 4
// 14: 13 7 3
// 15: 13 7 2
// 16: 13 12
// 17: 13 12 11 6
// 18: 13 12 10 6
// 19: 13 12 9 6 5 4
// 20: 13 12 8 6 5 4 2
// 21: 13 12 7 6 5 4 3 2
// 22: 13
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "Warning: There are iteration variables with default zero start attribute. Use +d=initialization for more information.
// "
// {0.0,-0.4988765881077395,-0.9987937622066468}
// endResult
