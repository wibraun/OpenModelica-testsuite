// name: inlineFunction7
// status: correct

// use new inline method
setCommandLineOptions("+inlineMethod=append");

loadString("
model foo

  record A
    Real a;
    Real b;
  end A;

  function f
    input A x;
    input Real z;
    output Real y[2];
    output Real w;
  protected
    Real a[2];
  algorithm
     a :=  {2*x.a, z*x.b};
     y := sum(a)*a;
     w := sum(y);
    annotation(Inline=true); 
  end f;

  Real y(start=0,fixed=true);
  Real z[2];
equation
  z = f(A(5 + time,3), time);
  der(y) = z[1]+z[2]*time;
end foo;
");
getErrorString();

setCommandLineOptions("+d=dumpBackendInline");
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// true
// ""
// true
//
// ############ BackendInline Method: append ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (8)
// ========================================
// 1: y$$Pfoo$Pf0[1]:VARIABLE()  type: Real [2]
// 2: y$$Pfoo$Pf0[2]:VARIABLE()  type: Real [2]
// 3: w$$Pfoo$Pf1:VARIABLE()  type: Real
// 4: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 5: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
// 6: z[2]:VARIABLE() .foo, .Real type: Real [2]
// 7: z[1]:VARIABLE() .foo, .Real type: Real [2]
// 8: y:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (7, 8)
// ========================================
// 1/1 (2): (z, _) = (y$$Pfoo$Pf0, w$$Pfoo$Pf1)   [dynamic]
// 2/3 (1): der(y) = z[1] + z[2] * time   [dynamic]
// 3/4 (1): w$$Pfoo$Pf1 = y$$Pfoo$Pf0[1] + y$$Pfoo$Pf0[2]   [unknown]
// 4/5 (1): y$$Pfoo$Pf0[2] = a$$Pfoo$Pf2[2] * (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2])   [unknown]
// 5/6 (1): y$$Pfoo$Pf0[1] = a$$Pfoo$Pf2[1] * (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2])   [unknown]
// 6/7 (1): a$$Pfoo$Pf2[2] = time * 3.0   [unknown]
// 7/8 (1): a$$Pfoo$Pf2[1] = 2.0 * (5.0 + time)   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 2
// 1: 2 1
// 2: 1 2 3
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 3
// 1: 2 1
// 2: 2 1
// 3: 2
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.0,60.6510630603002,152.0833501278569}
// endResult
