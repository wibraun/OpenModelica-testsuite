// name: inlineFunction2
// status: correct

// use new inline method
setCommandLineOptions("+inlineMethod=replace");

loadString("
model foo
  function f
    input Real x;
    output Real y;
    output Real y1;
  protected
    Real a[2];
  algorithm
     a[1] := 1;
     a[2] := 1;
     y := sum(a)*x;
     y1 := sum(a)*x + y;
    annotation(Inline=true); 
  end f;

  Real y(start=0,fixed=true);
  Real dy = der(y);
equation
 der(y) + 1 = f(der(y));
end foo;
");
getErrorString();
setCommandLineOptions("+d=dumpBackendInline");
getErrorString();

simulate(foo);
getErrorString();

val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// true
// ""
// true
// ""
//
// ############ BackendInline Method: replace ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (2)
// ========================================
// 1: dy:VARIABLE() .foo, .Real type: Real
// 2: y:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (2, 2)
// ========================================
// 1/1 (1): dy = der(y)   [binding]
// 2/2 (1): (1.0 + dy, _) = foo.f(dy)   [dynamic]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 2
// 1: 2 1
// 2: 1
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 2
// 1: 2 1
// 2: 1
//
// no matching
//
//
// Expression.generateCrefsExpFromExp: fail for1.0 + dy
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Failed to build model: foo"
// end SimulationResult;
// "[SimCode/SimCodeUtil.mo:0:0-0:0:writable] Error: Internal error function createNonlinearResidualEquationsComplex failed for: (1.0 + dy, _) = foo.f(dy)
// [<interactive>:20:2-20:24:writable] Error: Internal error function createNonlinearResidualEquations failed for equation: (1.0 + dy, _) = foo.f(dy)
// [SimCode/SimCodeUtil.mo:0:0-0:0:writable] Error: Internal error complex equations currently only supported on form v = functioncall(...). Equation: (1.0 + dy, _) = foo.f(dy) solve for {dy}
// [SimCode/SimCodeUtil.mo:0:0-0:0:writable] Error: Internal error function createSimCode failed [Transformation from optimised DAE to simulation code structure failed]
// "
//
//
// endResult
