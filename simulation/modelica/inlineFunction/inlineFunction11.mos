// name: inlineFunction11
// status: correct

// use new inline method
setCommandLineOptions("+inlineMethod=append");

loadString("
model foo

  record A
    Real a;
    Real b;
    Boolean c;
  end A;

  function f
    input A x;
    output Real y;
  algorithm
     y := if x.c then x.b+1 else x.b-1;
    annotation(Inline=true); 
  end f;

  function f1
    input Real p;
    output Real y;
  protected
    A r;
  algorithm
    r.a :=p;
    r.b :=2*p;
    r.c :=p>0.5;
 
    y := if r.c then f(r.a,r) else sin(r.a);
    annotation(Inline=true); 
  end f1;

  function f2
    input Real x;
    input Real y;
    output A r;
  algorithm
    for i in {1} loop
    r.a := if x>y then sin(x) else sin(y);
    r.b := if y>x then sin(x)+5 else sin(y)-5;
    r.c := if y<x then true else false;
    end for;
    annotation(Inline=true); 
  end f2;


  Real y(start=0,fixed=true);
  A b = A(time,y,time>0.5);
equation
  0 = f(f2(y,time))+der(y);
end foo;
");
getErrorString();
setCommandLineOptions("+d=dumpBackendInline");
getErrorString();
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// true
// ""
// true
// ""
//
// ############ BackendInline Method: append ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (4)
// ========================================
// 1: b.c:DISCRETE() .foo, .foo.A, .Boolean type: Boolean
// 2: b.b:VARIABLE() .foo, .foo.A, .Real type: Real
// 3: b.a:VARIABLE() .foo, .foo.A, .Real type: Real
// 4: y:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): b.a = time   [dynamic]
// 2/2 (1): b.b = y   [dynamic]
// 3/3 (1): b.c = time > 0.5   [dynamic]
// 4/4 (1): 0.0 = foo.f(foo.f2(y, time)) + der(y)   [dynamic]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 4
// 1: 3
// 2: -4 2
// 3: 1
// 4: 4 -4
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 4
// 1: 3
// 2: 2
// 3: 1
// 4: -4 4 -2
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.0,1.877583356589937,3.540310995780263}
// endResult
