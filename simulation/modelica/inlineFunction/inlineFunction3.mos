// name: inlineFunction3
// status: correct

loadString("
model foo

  record A
    Real a;
    Real b;
  end A;

  function f
    input A x;
    output Real y;
    output Real y1;
  protected
    Real a[2];
  algorithm
     a[1] := 1;
     a[2] := 1;
     y := sum(a)*x.a;
     y1 := sum(a)*x.b + y;
    annotation(Inline=true); 
  end f;

  Real y(start=0,fixed=true);
  Real dy = der(y);
equation
 der(y) + 1 = f(A(5 + time,3));
end foo;
");
getErrorString();
setCommandLineOptions("+d=dumpBackendInline");
getErrorString();
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// ""
// true
// ""
//
// ###############BackendInline############
// eq:dy = der(y)
//
// BackendInline fail for  in:der(y)
//
// eq:dy = der(y)
// outExp:foo.A(5.0 + time, 3.0)
//
// BackendInline fail for  in:foo.A(5.0 + time, 3.0)
// outExp:foo.f(foo.A(5.0 + time, 3.0))
//
// BackendInline
// start: $$Pfoo$Pf
// function body: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (2)
// ========================================
// 1: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): a[1] = 1.0   [unknown]
// 2/2 (1): a[2] = 1.0   [unknown]
// 3/3 (1): y = (a[1] + a[2]) * x.a   [unknown]
// 4/4 (1): y1 = (a[1] + a[2]) * x.b + y   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// function body replaced: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (2)
// ========================================
// 1: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): a[1] = 1.0   [unknown]
// 2/2 (1): a[2] = 1.0   [unknown]
// 3/3 (1): y = (a[1] + a[2]) * (5.0 + time)   [unknown]
// 4/4 (1): y1 = (a[1] + a[2]) * 3.0 + y   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// function body replaced2: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (4)
// ========================================
// 1: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
// 3: y1$$Pfoo$Pf1:VARIABLE()  type: Real
// 4: y$$Pfoo$Pf0:VARIABLE()  type: Real
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): y1$$Pfoo$Pf1 = 3.0 * (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) + y$$Pfoo$Pf0   [unknown]
// 2/2 (1): y$$Pfoo$Pf0 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * (5.0 + time)   [unknown]
// 3/3 (1): a$$Pfoo$Pf2[2] = 1.0   [unknown]
// 4/4 (1): a$$Pfoo$Pf2[1] = 1.0   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// function body reduced: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (4)
// ========================================
// 1: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
// 3: y$$Pfoo$Pf0:VARIABLE()  type: Real
// 4: y1$$Pfoo$Pf1:VARIABLE()  type: Real
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): a$$Pfoo$Pf2[1] = 1.0   [unknown]
// 2/2 (1): a$$Pfoo$Pf2[2] = 1.0   [unknown]
// 3/3 (1): y$$Pfoo$Pf0 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * (5.0 + time)   [unknown]
// 4/4 (1): y1$$Pfoo$Pf1 = 3.0 * (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) + y$$Pfoo$Pf0   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// ende: $$Pfoo$PfoutExp:(y1$$Pfoo$Pf1, y$$Pfoo$Pf0)
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.0,7.750000000000078,16.00000000000009}
// endResult
