// name: inlineFunction3
// status: correct

loadString("
model foo

  record A
    Real a;
    Real b;
  end A;

  function f
    input A x;
    output Real y;
    output Real y1;
  protected
    Real a[2];
  algorithm
     a[1] := 1;
     a[2] := 1;
     y := sum(a)*x.a;
     y1 := sum(a)*x.b + y;
    annotation(Inline=true); 
  end f;

  Real y(start=0,fixed=true);
  Real dy = der(y);
equation
 der(y) + 1 = f(A(5 + time,3));
end foo;
");
getErrorString();
setCommandLineOptions("+d=dumpBackendInline");
getErrorString();
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// ""
// true
// ""
//
// ############ BackendInline ############
// function body replace body: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (4)
// ========================================
// 1: y$$Pfoo$Pf0:VARIABLE()  type: Real
// 2: y1$$Pfoo$Pf1:VARIABLE()  type: Real
// 3: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 4: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): y1$$Pfoo$Pf1 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * x.b + y$$Pfoo$Pf0   [unknown]
// 2/2 (1): y$$Pfoo$Pf0 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * x.a   [unknown]
// 3/3 (1): a$$Pfoo$Pf2[2] = 1.0   [unknown]
// 4/4 (1): a$$Pfoo$Pf2[1] = 1.0   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (6)
// ========================================
// 1: y$$Pfoo$Pf0:VARIABLE()  type: Real
// 2: y1$$Pfoo$Pf1:VARIABLE()  type: Real
// 3: a$$Pfoo$Pf2[1]:VARIABLE()  type: Real [2]
// 4: a$$Pfoo$Pf2[2]:VARIABLE()  type: Real [2]
// 5: dy:VARIABLE() .foo, .Real type: Real
// 6: y:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (6, 6)
// ========================================
// 1/1 (1): dy = der(y)   [binding]
// 2/2 (1): (1.0 + dy, _) = (y$$Pfoo$Pf0, y1$$Pfoo$Pf1)   [dynamic]
// 3/3 (1): y1$$Pfoo$Pf1 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * 3.0 + y$$Pfoo$Pf0   [unknown]
// 4/4 (1): y$$Pfoo$Pf0 = (a$$Pfoo$Pf2[1] + a$$Pfoo$Pf2[2]) * (5.0 + time)   [unknown]
// 5/5 (1): a$$Pfoo$Pf2[2] = 1.0   [unknown]
// 6/6 (1): a$$Pfoo$Pf2[1] = 1.0   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 2
// 1: 2 1
// 2: 1
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 2
// 1: 2 1
// 2: 1
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.0,4.750000000000206,10.00000000000022}
// endResult
