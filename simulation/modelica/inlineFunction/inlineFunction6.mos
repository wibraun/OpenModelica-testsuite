// name: inlineFunction6
// status: correct

loadString("
model foo

  record A
    Real a;
    Real b;
  end A;

  function f
    input A x;
    input Real[:] z;
    output Real y;
    output Real y1;
  protected
    Real a[2];
  algorithm
     a[1] := f1(z[1]);
     a[2] := f1(z[2]);
     y := sum(a)*x.a + sum(z);
     y1 := sum(a)*x.b + y + sum(z);
    annotation(Inline=true); 
  end f;

  function f1
    input Real y;
    output Real x;
  protected
    Real y1 = 2*y + 7;
    Real[2] z = {2*y1, y*y1};
  algorithm
    x := sqrt(sum(z)*sum(z)*y1*y)/10/y1;
    annotation(Inline=true); 
  end f1;

  Real y(start=0,fixed=true);
  Real dy = der(y);
  Real y1,y2;
  Real[:] z =  {f1(f1(time)), f1(cos(time)), f1(exp(-time))};
equation
 der(y) + 1 = f(A(f1(5 + time),3), z);
 (y1,y2) = f(A(5 + time,3), z);
end foo;
");
getErrorString();
setCommandLineOptions("+d=dumpBackendInline");
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// ""
// true
//
// ############ BackendInline ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (51)
// ========================================
// 1: x$$Pfoo$Pf130:VARIABLE()  type: Real
// 2: y1$$Pfoo$Pf131:VARIABLE()  type: Real
// 3: z$$Pfoo$Pf132[1]:VARIABLE()  type: Real [2]
// 4: z$$Pfoo$Pf132[2]:VARIABLE()  type: Real [2]
// 5: x$$Pfoo$Pf127:VARIABLE()  type: Real
// 6: y1$$Pfoo$Pf128:VARIABLE()  type: Real
// 7: z$$Pfoo$Pf129[1]:VARIABLE()  type: Real [2]
// 8: z$$Pfoo$Pf129[2]:VARIABLE()  type: Real [2]
// 9: x$$Pfoo$Pf124:VARIABLE()  type: Real
// 10: y1$$Pfoo$Pf125:VARIABLE()  type: Real
// 11: z$$Pfoo$Pf126[1]:VARIABLE()  type: Real [2]
// 12: z$$Pfoo$Pf126[2]:VARIABLE()  type: Real [2]
// 13: x$$Pfoo$Pf121:VARIABLE()  type: Real
// 14: y1$$Pfoo$Pf122:VARIABLE()  type: Real
// 15: z$$Pfoo$Pf123[1]:VARIABLE()  type: Real [2]
// 16: z$$Pfoo$Pf123[2]:VARIABLE()  type: Real [2]
// 17: y$$Pfoo$Pf18:VARIABLE()  type: Real
// 18: y1$$Pfoo$Pf19:VARIABLE()  type: Real
// 19: a$$Pfoo$Pf20[1]:VARIABLE()  type: Real [2]
// 20: a$$Pfoo$Pf20[2]:VARIABLE()  type: Real [2]
// 21: y$$Pfoo$Pf15:VARIABLE()  type: Real
// 22: y1$$Pfoo$Pf16:VARIABLE()  type: Real
// 23: a$$Pfoo$Pf17[1]:VARIABLE()  type: Real [2]
// 24: a$$Pfoo$Pf17[2]:VARIABLE()  type: Real [2]
// 25: x$$Pfoo$Pf112:VARIABLE()  type: Real
// 26: y1$$Pfoo$Pf113:VARIABLE()  type: Real
// 27: z$$Pfoo$Pf114[1]:VARIABLE()  type: Real [2]
// 28: z$$Pfoo$Pf114[2]:VARIABLE()  type: Real [2]
// 29: x$$Pfoo$Pf19:VARIABLE()  type: Real
// 30: y1$$Pfoo$Pf110:VARIABLE()  type: Real
// 31: z$$Pfoo$Pf111[1]:VARIABLE()  type: Real [2]
// 32: z$$Pfoo$Pf111[2]:VARIABLE()  type: Real [2]
// 33: x$$Pfoo$Pf16:VARIABLE()  type: Real
// 34: y1$$Pfoo$Pf17:VARIABLE()  type: Real
// 35: z$$Pfoo$Pf18[1]:VARIABLE()  type: Real [2]
// 36: z$$Pfoo$Pf18[2]:VARIABLE()  type: Real [2]
// 37: x$$Pfoo$Pf13:VARIABLE()  type: Real
// 38: y1$$Pfoo$Pf14:VARIABLE()  type: Real
// 39: z$$Pfoo$Pf15[1]:VARIABLE()  type: Real [2]
// 40: z$$Pfoo$Pf15[2]:VARIABLE()  type: Real [2]
// 41: x$$Pfoo$Pf10:VARIABLE()  type: Real
// 42: y1$$Pfoo$Pf11:VARIABLE()  type: Real
// 43: z$$Pfoo$Pf12[1]:VARIABLE()  type: Real [2]
// 44: z$$Pfoo$Pf12[2]:VARIABLE()  type: Real [2]
// 45: z[3]:VARIABLE() .foo, .Real type: Real [3]
// 46: z[2]:VARIABLE() .foo, .Real type: Real [3]
// 47: z[1]:VARIABLE() .foo, .Real type: Real [3]
// 48: y2:VARIABLE() .foo, .Real type: Real
// 49: y1:VARIABLE() .foo, .Real type: Real
// 50: dy:VARIABLE() .foo, .Real type: Real
// 51: y:STATE(1)(start = 0.0 fixed = true ) .foo, .Real type: Real
//
//
// Equations (48, 51)
// ========================================
// 1/1 (1): dy = der(y)   [binding]
// 2/2 (3): z = {x$$Pfoo$Pf13, x$$Pfoo$Pf16, x$$Pfoo$Pf19}   [dynamic]
// 3/5 (1): (1.0 + dy, _) = (y$$Pfoo$Pf15, y1$$Pfoo$Pf16)   [dynamic]
// 4/6 (2): (y1, y2) = (y$$Pfoo$Pf18, y1$$Pfoo$Pf19)   [dynamic]
// 5/8 (1): x$$Pfoo$Pf10 = 0.1 * sqrt((z$$Pfoo$Pf12[1] + z$$Pfoo$Pf12[2]) ^ 2.0 * y1$$Pfoo$Pf11 * time) / y1$$Pfoo$Pf11   [unknown]
// 6/9 (1): z$$Pfoo$Pf12[2] = time * y1$$Pfoo$Pf11   [unknown]
// 7/10 (1): z$$Pfoo$Pf12[1] = 2.0 * y1$$Pfoo$Pf11   [unknown]
// 8/11 (1): y1$$Pfoo$Pf11 = 7.0 + 2.0 * time   [unknown]
// 9/12 (1): x$$Pfoo$Pf13 = 0.1 * sqrt((z$$Pfoo$Pf15[1] + z$$Pfoo$Pf15[2]) ^ 2.0 * y1$$Pfoo$Pf14 * x$$Pfoo$Pf10) / y1$$Pfoo$Pf14   [unknown]
// 10/13 (1): z$$Pfoo$Pf15[2] = x$$Pfoo$Pf10 * y1$$Pfoo$Pf14   [unknown]
// 11/14 (1): z$$Pfoo$Pf15[1] = 2.0 * y1$$Pfoo$Pf14   [unknown]
// 12/15 (1): y1$$Pfoo$Pf14 = 7.0 + 2.0 * x$$Pfoo$Pf10   [unknown]
// 13/16 (1): x$$Pfoo$Pf16 = 0.1 * sqrt((z$$Pfoo$Pf18[1] + z$$Pfoo$Pf18[2]) ^ 2.0 * y1$$Pfoo$Pf17 * cos(time)) / y1$$Pfoo$Pf17   [unknown]
// 14/17 (1): z$$Pfoo$Pf18[2] = cos(time) * y1$$Pfoo$Pf17   [unknown]
// 15/18 (1): z$$Pfoo$Pf18[1] = 2.0 * y1$$Pfoo$Pf17   [unknown]
// 16/19 (1): y1$$Pfoo$Pf17 = 7.0 + 2.0 * cos(time)   [unknown]
// 17/20 (1): x$$Pfoo$Pf19 = 0.1 * sqrt((z$$Pfoo$Pf111[1] + z$$Pfoo$Pf111[2]) ^ 2.0 * y1$$Pfoo$Pf110 * exp(-time)) / y1$$Pfoo$Pf110   [unknown]
// 18/21 (1): z$$Pfoo$Pf111[2] = exp(-time) * y1$$Pfoo$Pf110   [unknown]
// 19/22 (1): z$$Pfoo$Pf111[1] = 2.0 * y1$$Pfoo$Pf110   [unknown]
// 20/23 (1): y1$$Pfoo$Pf110 = 7.0 + 2.0 * exp(-time)   [unknown]
// 21/24 (1): x$$Pfoo$Pf112 = 0.1 * sqrt((z$$Pfoo$Pf114[1] + z$$Pfoo$Pf114[2]) ^ 2.0 * y1$$Pfoo$Pf113 * (5.0 + time)) / y1$$Pfoo$Pf113   [unknown]
// 22/25 (1): z$$Pfoo$Pf114[2] = (5.0 + time) * y1$$Pfoo$Pf113   [unknown]
// 23/26 (1): z$$Pfoo$Pf114[1] = 2.0 * y1$$Pfoo$Pf113   [unknown]
// 24/27 (1): y1$$Pfoo$Pf113 = 7.0 + 2.0 * (5.0 + time)   [unknown]
// 25/28 (1): y1$$Pfoo$Pf16 = (a$$Pfoo$Pf17[1] + a$$Pfoo$Pf17[2]) * 3.0 + y$$Pfoo$Pf15 + sum({z[1], z[2], z[3]})   [unknown]
// 26/29 (1): y$$Pfoo$Pf15 = (a$$Pfoo$Pf17[1] + a$$Pfoo$Pf17[2]) * x$$Pfoo$Pf112 + sum({z[1], z[2], z[3]})   [unknown]
// 27/30 (1): a$$Pfoo$Pf17[2] = x$$Pfoo$Pf121   [unknown]
// 28/31 (1): a$$Pfoo$Pf17[1] = x$$Pfoo$Pf124   [unknown]
// 29/32 (1): y1$$Pfoo$Pf19 = (a$$Pfoo$Pf20[1] + a$$Pfoo$Pf20[2]) * 3.0 + y$$Pfoo$Pf18 + sum({z[1], z[2], z[3]})   [unknown]
// 30/33 (1): y$$Pfoo$Pf18 = (a$$Pfoo$Pf20[1] + a$$Pfoo$Pf20[2]) * (5.0 + time) + sum({z[1], z[2], z[3]})   [unknown]
// 31/34 (1): a$$Pfoo$Pf20[2] = x$$Pfoo$Pf127   [unknown]
// 32/35 (1): a$$Pfoo$Pf20[1] = x$$Pfoo$Pf130   [unknown]
// 33/36 (1): x$$Pfoo$Pf121 = 0.1 * sqrt((z$$Pfoo$Pf123[1] + z$$Pfoo$Pf123[2]) ^ 2.0 * y1$$Pfoo$Pf122 * z[2]) / y1$$Pfoo$Pf122   [unknown]
// 34/37 (1): z$$Pfoo$Pf123[2] = z[2] * y1$$Pfoo$Pf122   [unknown]
// 35/38 (1): z$$Pfoo$Pf123[1] = 2.0 * y1$$Pfoo$Pf122   [unknown]
// 36/39 (1): y1$$Pfoo$Pf122 = 7.0 + 2.0 * z[2]   [unknown]
// 37/40 (1): x$$Pfoo$Pf124 = 0.1 * sqrt((z$$Pfoo$Pf126[1] + z$$Pfoo$Pf126[2]) ^ 2.0 * y1$$Pfoo$Pf125 * z[1]) / y1$$Pfoo$Pf125   [unknown]
// 38/41 (1): z$$Pfoo$Pf126[2] = z[1] * y1$$Pfoo$Pf125   [unknown]
// 39/42 (1): z$$Pfoo$Pf126[1] = 2.0 * y1$$Pfoo$Pf125   [unknown]
// 40/43 (1): y1$$Pfoo$Pf125 = 7.0 + 2.0 * z[1]   [unknown]
// 41/44 (1): x$$Pfoo$Pf127 = 0.1 * sqrt((z$$Pfoo$Pf129[1] + z$$Pfoo$Pf129[2]) ^ 2.0 * y1$$Pfoo$Pf128 * z[2]) / y1$$Pfoo$Pf128   [unknown]
// 42/45 (1): z$$Pfoo$Pf129[2] = z[2] * y1$$Pfoo$Pf128   [unknown]
// 43/46 (1): z$$Pfoo$Pf129[1] = 2.0 * y1$$Pfoo$Pf128   [unknown]
// 44/47 (1): y1$$Pfoo$Pf128 = 7.0 + 2.0 * z[2]   [unknown]
// 45/48 (1): x$$Pfoo$Pf130 = 0.1 * sqrt((z$$Pfoo$Pf132[1] + z$$Pfoo$Pf132[2]) ^ 2.0 * y1$$Pfoo$Pf131 * z[1]) / y1$$Pfoo$Pf131   [unknown]
// 46/49 (1): z$$Pfoo$Pf132[2] = z[1] * y1$$Pfoo$Pf131   [unknown]
// 47/50 (1): z$$Pfoo$Pf132[1] = 2.0 * y1$$Pfoo$Pf131   [unknown]
// 48/51 (1): y1$$Pfoo$Pf131 = 7.0 + 2.0 * z[1]   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 4
// 1: 7 6
// 2: 3 2 1
// 3: 1 2 3 6
// 4: 1 2 3 4 5
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 7
// 1: 4 3 2
// 2: 4 3 2
// 3: 4 3 2
// 4: 4
// 5: 4
// 6: 3 1
// 7: 1
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.0,4.530832820044409,9.949745602625672}
// endResult
