// name: inlineFunction1
// status: correct

loadString("
model foo
  function f
    input Real x;
    output Real y;
  protected
    Real a[2];
  algorithm
     a[1] := 1;
     a[2] := 1;
     y := sum(a)*x;
    annotation(Inline=true); 
  end f;

  Real y(start=0,fixed=true);
  Real dy = der(y);
equation
 der(y) + 1 = f(der(y));
end foo;
");
getErrorString();

setCommandLineOptions("+d=dumpBackendInline");
simulate(foo);
getErrorString();
val(time,{0,0.5,1.0});
val(y,{0,0.5,1.0});
// Result:
// true
// ""
// true
//
// ###############BackendInline############
// eq:dy = der(y)
//
// BackendInline fail for  in:der(y)
//
// eq:dy = der(y)
//
// eq:1.0 + dy = foo.f(dy)
// outExp:foo.f(dy)
//
// BackendInline
// start: $$Pfoo$Pf
// function body: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (2)
// ========================================
// 1: a$$Pfoo$Pf1[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf1[2]:VARIABLE()  type: Real [2]
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): a[1] = 1.0   [unknown]
// 2/2 (1): a[2] = 1.0   [unknown]
// 3/3 (1): y = (a[1] + a[2]) * x   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// function body replaced: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (2)
// ========================================
// 1: a$$Pfoo$Pf1[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf1[2]:VARIABLE()  type: Real [2]
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): a[1] = 1.0   [unknown]
// 2/2 (1): a[2] = 1.0   [unknown]
// 3/3 (1): y = (a[1] + a[2]) * dy   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// function body replaced2: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: a$$Pfoo$Pf1[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf1[2]:VARIABLE()  type: Real [2]
// 3: y$$Pfoo$Pf0:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): y$$Pfoo$Pf0 = (a$$Pfoo$Pf1[1] + a$$Pfoo$Pf1[2]) * dy   [unknown]
// 2/2 (1): a$$Pfoo$Pf1[2] = 1.0   [unknown]
// 3/3 (1): a$$Pfoo$Pf1[1] = 1.0   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// function body reduced: $$Pfoo$Pf
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: a$$Pfoo$Pf1[1]:VARIABLE()  type: Real [2]
// 2: a$$Pfoo$Pf1[2]:VARIABLE()  type: Real [2]
// 3: y$$Pfoo$Pf0:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): a$$Pfoo$Pf1[1] = 1.0   [unknown]
// 2/2 (1): a$$Pfoo$Pf1[2] = 1.0   [unknown]
// 3/3 (1): y$$Pfoo$Pf0 = (a$$Pfoo$Pf1[1] + a$$Pfoo$Pf1[2]) * dy   [unknown]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// ende: $$Pfoo$PfoutExp:y$$Pfoo$Pf0
//
// eq:1.0 + dy = y$$Pfoo$Pf0
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.5,1.0}
// {0.0,0.5,1.0}
// endResult
