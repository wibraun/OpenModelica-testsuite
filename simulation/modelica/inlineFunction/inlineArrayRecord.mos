// name: inlineArrayRecord
// status: correct

// use new inline method
setCommandLineOptions("+inlineMethod=append");

loadString("
model foo
  record A
    Real x;
    Real y;
  end A;

  function f
    input A[2] x;
    output Real y;
  algorithm
     y := x[1].x + x[1].y + x[2].x + x[2].y
    annotation(Inline=true); 
  end f;

  Real a;
  A[2] b = {A(time, time^2), A(time^3, time^4)};
equation
 a = f(b);
end foo;
");
getErrorString();

setCommandLineOptions("+d=dumpBackendInline");
getErrorString();
simulate(foo);
getErrorString();
val(a,{0,0.5,1.0}); // 0, 4// Result:
//
// true
// "[simulation/modelica/inlineFunction/inlineArrayRecord.mos:5:1-5:45:writable] Error: Class setCommandLineOptions not found in scope <global scope> (looking for a function or record).
// "
// true
// ""
//
// ############ BackendInline ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (5)
// ========================================
// 1: b[2].y:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 2: b[2].x:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 3: b[1].y:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 4: b[1].x:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 5: a:VARIABLE() .foo, .Real type: Real
//
//
// Equations (5, 5)
// ========================================
// 1/1 (1): b[1].x = time   [dynamic]
// 2/2 (1): b[1].y = time ^ 2.0   [dynamic]
// 3/3 (1): b[2].x = time ^ 3.0   [dynamic]
// 4/4 (1): b[2].y = time ^ 4.0   [dynamic]
// 5/5 (1): a = foo.f({b[1], b[2]})   [dynamic]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 5
// 1: 4
// 2: 3
// 3: 2
// 4: 1
// 5: 2 1 4 3 5
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 5
// 1: 5 4
// 2: 5 3
// 3: 5 2
// 4: 5 1
// 5: 5
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.9375,4.0}
// endResult
// Result:
// true
// true
// ""
// true
// ""
//
// ############ BackendInline Method: append ############
// ########################################
// Result DAE after Inline. (1 partitions)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (5)
// ========================================
// 1: b[2].y:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 2: b[2].x:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 3: b[1].y:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 4: b[1].x:VARIABLE() .foo, .foo.A, .Real type: Real [2]
// 5: a:VARIABLE() .foo, .Real type: Real
//
//
// Equations (5, 5)
// ========================================
// 1/1 (1): b[1].x = time   [dynamic]
// 2/2 (1): b[1].y = time ^ 2.0   [dynamic]
// 3/3 (1): b[2].x = time ^ 3.0   [dynamic]
// 4/4 (1): b[2].y = time ^ 4.0   [dynamic]
// 5/5 (1): a = foo.f({b[1], b[2]})   [dynamic]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// Incidence Matrix (row: equation)
// ========================================
// number of rows: 5
// 1: 4
// 2: 3
// 3: 2
// 4: 1
// 5: 2 1 4 3 5
//
// Transposed Incidence Matrix (row: variable)
// ========================================
// number of rows: 5
// 1: 5 4
// 2: 5 3
// 3: 5 2
// 4: 5 1
// 5: 5
//
// no matching
//
//
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {0.0,0.9375,4.0}
// endResult
