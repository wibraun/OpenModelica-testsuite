// name: testADOLC5
// status: correct
// teardown_command: rm -f adolcTest* output.log


loadString("
  model adolcTest
    function f
      input Real x1;
      input Real x2;
      output Real y;
    algorithm
      y := x1*x2;
    end f;
    Real y[8](start=y0);
    parameter Real y0[8] = { 1, 0, 0, 0, 0, 0, 0, 0.0057};
    parameter Real p[3] = { 1.71, 0.43, 280.0};
  equation
    der(y[1]) = -p[1]*y[1] + p[2]*y[2] + 8.32*y[3] + 0.0007;
    der(y[2]) = p[1]*y[1] - 8.75*y[2];
    der(y[3]) = -10.03*y[3] + p[2]*y[4] + 0.035*y[5];
    der(y[4]) =  8.32*y[2] + p[1]*y[3] - 1.12*y[4];
    der(y[5]) = -1.745*y[5] + p[2]*y[6] + p[2]*y[7];
    der(y[6]) = -p[3]*f(y[6],y[8]) + 0.69*y[4] + p[1]*y[5] - p[2]*y[6] + 0.69*y[7];
    der(y[7]) =  p[3]*f(y[6],y[8]) - 1.81*y[7];
    der(y[8]) = -der(y[7]);
  end adolcTest;
");
getErrorString();

setCommandLineOptions("--adolcTrace");
getErrorString();

simulate(adolcTest, simflags="-jacobian=adolc");
getErrorString();

simulate(adolcTest, simflags="-jacobian=adolcSparse");
getErrorString();


// Result:
// true
// ""
// true
// ""
// createOperationData equations input: 
// <equation index="17">
//   <assign>
//     <defines name="der(y[7])"/>
//     <depends name="y[7]" />
//     <depends name="y[8]" />
//     <depends name="y[6]" />
//     <depends name="p[3]" />
//     <rhs>p[3] * adolcTest.f(y[6], y[8]) + -1.81 * y[7]</rhs>
//   </assign>
// </equation>
// <equation index="18">
//   <assign>
//     <defines name="der(y[8])"/>
//     <depends name="y[7]" />
//     <rhs>-der(y[7])</rhs>
//   </assign>
// </equation>
// <equation index="19">
//   <assign>
//     <defines name="der(y[6])"/>
//     <depends name="y[8]" />
//     <depends name="p[3]" />
//     <depends name="y[6]" />
//     <depends name="p[2]" />
//     <depends name="y[7]" />
//     <depends name="y[5]" />
//     <depends name="p[1]" />
//     <depends name="y[4]" />
//     <rhs>0.6899999999999999 * y[4] + p[1] * y[5] + 0.6899999999999999 * y[7] + (-p[2]) * y[6] - p[3] * adolcTest.f(y[6], y[8])</rhs>
//   </assign>
// </equation>
// <equation index="20">
//   <assign>
//     <defines name="der(y[5])"/>
//     <depends name="y[7]" />
//     <depends name="y[5]" />
//     <depends name="y[6]" />
//     <depends name="p[2]" />
//     <rhs>p[2] * y[6] + -1.745 * y[5] + p[2] * y[7]</rhs>
//   </assign>
// </equation>
// <equation index="21">
//   <assign>
//     <defines name="der(y[4])"/>
//     <depends name="y[4]" />
//     <depends name="y[3]" />
//     <depends name="p[1]" />
//     <depends name="y[2]" />
//     <rhs>8.32 * y[2] + p[1] * y[3] + -1.12 * y[4]</rhs>
//   </assign>
// </equation>
// <equation index="22">
//   <assign>
//     <defines name="der(y[3])"/>
//     <depends name="y[5]" />
//     <depends name="y[3]" />
//     <depends name="y[4]" />
//     <depends name="p[2]" />
//     <rhs>p[2] * y[4] + -10.03 * y[3] + 0.035 * y[5]</rhs>
//   </assign>
// </equation>
// <equation index="23">
//   <assign>
//     <defines name="der(y[2])"/>
//     <depends name="y[2]" />
//     <depends name="y[1]" />
//     <depends name="p[1]" />
//     <rhs>p[1] * y[1] + -8.75 * y[2]</rhs>
//   </assign>
// </equation>
// <equation index="24">
//   <assign>
//     <defines name="der(y[1])"/>
//     <depends name="y[1]" />
//     <depends name="p[1]" />
//     <depends name="y[3]" />
//     <depends name="y[2]" />
//     <depends name="p[2]" />
//     <rhs>0.0007 + p[2] * y[2] + 8.32 * y[3] - p[1] * y[1]</rhs>
//   </assign>
// </equation>
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : mult_a_a ? VAR(x1 0)  VAR(x2 1)  
// ### OpeartionData : adolcTest###
// 1 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[3] 2)  
// 2 result: VAR($tmpOpVar_17 17) : assign_a ? VAR(y[8] 7)  
// 3 result: VAR($tmpOpVar_18 18) : assign_a ? VAR(y[6] 5)  
// 4 result: VAR($tmpOpVar_19 19) : call fname:"_adolcTest_f_aat.txt" ? VAR($tmpOpVar_17 17)  INDEX: 2 INDEX: 1 
// 5 result: VAR($tmpOpVar_20 20) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR($tmpOpVar_19 19)  
// 6 result: VAR($tmpOpVar_21 21) : mult_d_a ? CONST(-1.81)  VAR(y[7] 6)  
// 7 result: VAR($DER.y[7] 14) : plus_a_a ? VAR($tmpOpVar_20 20)  VAR($tmpOpVar_21 21)  
// 8 result: VAR($DER.y[8] 15) : neg_sign_a ? VAR($DER.y[7] 14)  
// 9 result: VAR($tmpOpVar_16 16) : mult_d_a ? CONST(0.6899999999999999)  VAR(y[4] 3)  
// 10 result: VAR($tmpOpVar_17 17) : assign_p ? VAR(p[1] 0)  
// 11 result: VAR($tmpOpVar_18 18) : mult_a_a ? VAR($tmpOpVar_17 17)  VAR(y[5] 4)  
// 12 result: VAR($tmpOpVar_19 19) : mult_d_a ? CONST(0.6899999999999999)  VAR(y[7] 6)  
// 13 result: VAR($tmpOpVar_20 20) : assign_p ? VAR(p[2] 1)  
// 14 result: VAR($tmpOpVar_21 21) : neg_sign_a ? VAR($tmpOpVar_20 20)  
// 15 result: VAR($tmpOpVar_22 22) : mult_a_a ? VAR($tmpOpVar_21 21)  VAR(y[6] 5)  
// 16 result: VAR($tmpOpVar_23 23) : assign_p ? VAR(p[3] 2)  
// 17 result: VAR($tmpOpVar_24 24) : assign_a ? VAR(y[8] 7)  
// 18 result: VAR($tmpOpVar_25 25) : assign_a ? VAR(y[6] 5)  
// 19 result: VAR($tmpOpVar_26 26) : call fname:"_adolcTest_f_aat.txt" ? VAR($tmpOpVar_24 24)  INDEX: 2 INDEX: 1 
// 20 result: VAR($tmpOpVar_27 27) : mult_a_a ? VAR($tmpOpVar_23 23)  VAR($tmpOpVar_26 26)  
// 21 result: VAR($tmpOpVar_28 28) : min_a_a ? VAR($tmpOpVar_22 22)  VAR($tmpOpVar_27 27)  
// 22 result: VAR($tmpOpVar_29 29) : plus_a_a ? VAR($tmpOpVar_19 19)  VAR($tmpOpVar_28 28)  
// 23 result: VAR($tmpOpVar_30 30) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_29 29)  
// 24 result: VAR($DER.y[6] 13) : plus_a_a ? VAR($tmpOpVar_16 16)  VAR($tmpOpVar_30 30)  
// 25 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[2] 1)  
// 26 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[6] 5)  
// 27 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(-1.745)  VAR(y[5] 4)  
// 28 result: VAR($tmpOpVar_19 19) : assign_p ? VAR(p[2] 1)  
// 29 result: VAR($tmpOpVar_20 20) : mult_a_a ? VAR($tmpOpVar_19 19)  VAR(y[7] 6)  
// 30 result: VAR($tmpOpVar_21 21) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_20 20)  
// 31 result: VAR($DER.y[5] 12) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_21 21)  
// 32 result: VAR($tmpOpVar_16 16) : mult_d_a ? CONST(8.32)  VAR(y[2] 1)  
// 33 result: VAR($tmpOpVar_17 17) : assign_p ? VAR(p[1] 0)  
// 34 result: VAR($tmpOpVar_18 18) : mult_a_a ? VAR($tmpOpVar_17 17)  VAR(y[3] 2)  
// 35 result: VAR($tmpOpVar_19 19) : mult_d_a ? CONST(-1.12)  VAR(y[4] 3)  
// 36 result: VAR($tmpOpVar_20 20) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_19 19)  
// 37 result: VAR($DER.y[4] 11) : plus_a_a ? VAR($tmpOpVar_16 16)  VAR($tmpOpVar_20 20)  
// 38 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[2] 1)  
// 39 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[4] 3)  
// 40 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(-10.03)  VAR(y[3] 2)  
// 41 result: VAR($tmpOpVar_19 19) : mult_d_a ? CONST(0.035)  VAR(y[5] 4)  
// 42 result: VAR($tmpOpVar_20 20) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_19 19)  
// 43 result: VAR($DER.y[3] 10) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_20 20)  
// 44 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[1] 0)  
// 45 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[1] 0)  
// 46 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(-8.75)  VAR(y[2] 1)  
// 47 result: VAR($DER.y[2] 9) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_18 18)  
// 48 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[2] 1)  
// 49 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[2] 1)  
// 50 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(8.32)  VAR(y[3] 2)  
// 51 result: VAR($tmpOpVar_19 19) : assign_p ? VAR(p[1] 0)  
// 52 result: VAR($tmpOpVar_20 20) : mult_a_a ? VAR($tmpOpVar_19 19)  VAR(y[1] 0)  
// 53 result: VAR($tmpOpVar_21 21) : min_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_20 20)  
// 54 result: VAR($tmpOpVar_22 22) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_21 21)  
// 55 result: VAR($DER.y[1] 8) : plus_d_a ? CONST(0.0007)  VAR($tmpOpVar_22 22)  
// ### OpeartionData : _adolcTest_f###
// 56 result: VAR(y 2) : mult_a_a ? VAR(x1 0)  VAR(x2 1)  
// record SimulationResult
//     resultFile = "adolcTest_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'adolcTest', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-jacobian=adolc'",
//     messages = "creating subtrace : tag(1), file = _adolcTest_f_aat.txt
// ADOL-C Warning: reading ascii trace creates no taylor stack
// Remember to run forward mode with correct setup first.
// ADOL-C Warning: reading ascii trace creates no taylor stack
// Remember to run forward mode with correct setup first.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// createOperationData equations input: 
// <equation index="17">
//   <assign>
//     <defines name="der(y[7])"/>
//     <depends name="y[7]" />
//     <depends name="y[8]" />
//     <depends name="y[6]" />
//     <depends name="p[3]" />
//     <rhs>p[3] * adolcTest.f(y[6], y[8]) + -1.81 * y[7]</rhs>
//   </assign>
// </equation>
// <equation index="18">
//   <assign>
//     <defines name="der(y[8])"/>
//     <depends name="y[7]" />
//     <rhs>-der(y[7])</rhs>
//   </assign>
// </equation>
// <equation index="19">
//   <assign>
//     <defines name="der(y[6])"/>
//     <depends name="y[8]" />
//     <depends name="p[3]" />
//     <depends name="y[6]" />
//     <depends name="p[2]" />
//     <depends name="y[7]" />
//     <depends name="y[5]" />
//     <depends name="p[1]" />
//     <depends name="y[4]" />
//     <rhs>0.6899999999999999 * y[4] + p[1] * y[5] + 0.6899999999999999 * y[7] + (-p[2]) * y[6] - p[3] * adolcTest.f(y[6], y[8])</rhs>
//   </assign>
// </equation>
// <equation index="20">
//   <assign>
//     <defines name="der(y[5])"/>
//     <depends name="y[7]" />
//     <depends name="y[5]" />
//     <depends name="y[6]" />
//     <depends name="p[2]" />
//     <rhs>p[2] * y[6] + -1.745 * y[5] + p[2] * y[7]</rhs>
//   </assign>
// </equation>
// <equation index="21">
//   <assign>
//     <defines name="der(y[4])"/>
//     <depends name="y[4]" />
//     <depends name="y[3]" />
//     <depends name="p[1]" />
//     <depends name="y[2]" />
//     <rhs>8.32 * y[2] + p[1] * y[3] + -1.12 * y[4]</rhs>
//   </assign>
// </equation>
// <equation index="22">
//   <assign>
//     <defines name="der(y[3])"/>
//     <depends name="y[5]" />
//     <depends name="y[3]" />
//     <depends name="y[4]" />
//     <depends name="p[2]" />
//     <rhs>p[2] * y[4] + -10.03 * y[3] + 0.035 * y[5]</rhs>
//   </assign>
// </equation>
// <equation index="23">
//   <assign>
//     <defines name="der(y[2])"/>
//     <depends name="y[2]" />
//     <depends name="y[1]" />
//     <depends name="p[1]" />
//     <rhs>p[1] * y[1] + -8.75 * y[2]</rhs>
//   </assign>
// </equation>
// <equation index="24">
//   <assign>
//     <defines name="der(y[1])"/>
//     <depends name="y[1]" />
//     <depends name="p[1]" />
//     <depends name="y[3]" />
//     <depends name="y[2]" />
//     <depends name="p[2]" />
//     <rhs>0.0007 + p[2] * y[2] + 8.32 * y[3] - p[1] * y[1]</rhs>
//   </assign>
// </equation>
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : mult_a_a ? VAR(x1 0)  VAR(x2 1)  
// ### OpeartionData : adolcTest###
// 1 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[3] 2)  
// 2 result: VAR($tmpOpVar_17 17) : assign_a ? VAR(y[8] 7)  
// 3 result: VAR($tmpOpVar_18 18) : assign_a ? VAR(y[6] 5)  
// 4 result: VAR($tmpOpVar_19 19) : call fname:"_adolcTest_f_aat.txt" ? VAR($tmpOpVar_17 17)  INDEX: 2 INDEX: 1 
// 5 result: VAR($tmpOpVar_20 20) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR($tmpOpVar_19 19)  
// 6 result: VAR($tmpOpVar_21 21) : mult_d_a ? CONST(-1.81)  VAR(y[7] 6)  
// 7 result: VAR($DER.y[7] 14) : plus_a_a ? VAR($tmpOpVar_20 20)  VAR($tmpOpVar_21 21)  
// 8 result: VAR($DER.y[8] 15) : neg_sign_a ? VAR($DER.y[7] 14)  
// 9 result: VAR($tmpOpVar_16 16) : mult_d_a ? CONST(0.6899999999999999)  VAR(y[4] 3)  
// 10 result: VAR($tmpOpVar_17 17) : assign_p ? VAR(p[1] 0)  
// 11 result: VAR($tmpOpVar_18 18) : mult_a_a ? VAR($tmpOpVar_17 17)  VAR(y[5] 4)  
// 12 result: VAR($tmpOpVar_19 19) : mult_d_a ? CONST(0.6899999999999999)  VAR(y[7] 6)  
// 13 result: VAR($tmpOpVar_20 20) : assign_p ? VAR(p[2] 1)  
// 14 result: VAR($tmpOpVar_21 21) : neg_sign_a ? VAR($tmpOpVar_20 20)  
// 15 result: VAR($tmpOpVar_22 22) : mult_a_a ? VAR($tmpOpVar_21 21)  VAR(y[6] 5)  
// 16 result: VAR($tmpOpVar_23 23) : assign_p ? VAR(p[3] 2)  
// 17 result: VAR($tmpOpVar_24 24) : assign_a ? VAR(y[8] 7)  
// 18 result: VAR($tmpOpVar_25 25) : assign_a ? VAR(y[6] 5)  
// 19 result: VAR($tmpOpVar_26 26) : call fname:"_adolcTest_f_aat.txt" ? VAR($tmpOpVar_24 24)  INDEX: 2 INDEX: 1 
// 20 result: VAR($tmpOpVar_27 27) : mult_a_a ? VAR($tmpOpVar_23 23)  VAR($tmpOpVar_26 26)  
// 21 result: VAR($tmpOpVar_28 28) : min_a_a ? VAR($tmpOpVar_22 22)  VAR($tmpOpVar_27 27)  
// 22 result: VAR($tmpOpVar_29 29) : plus_a_a ? VAR($tmpOpVar_19 19)  VAR($tmpOpVar_28 28)  
// 23 result: VAR($tmpOpVar_30 30) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_29 29)  
// 24 result: VAR($DER.y[6] 13) : plus_a_a ? VAR($tmpOpVar_16 16)  VAR($tmpOpVar_30 30)  
// 25 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[2] 1)  
// 26 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[6] 5)  
// 27 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(-1.745)  VAR(y[5] 4)  
// 28 result: VAR($tmpOpVar_19 19) : assign_p ? VAR(p[2] 1)  
// 29 result: VAR($tmpOpVar_20 20) : mult_a_a ? VAR($tmpOpVar_19 19)  VAR(y[7] 6)  
// 30 result: VAR($tmpOpVar_21 21) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_20 20)  
// 31 result: VAR($DER.y[5] 12) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_21 21)  
// 32 result: VAR($tmpOpVar_16 16) : mult_d_a ? CONST(8.32)  VAR(y[2] 1)  
// 33 result: VAR($tmpOpVar_17 17) : assign_p ? VAR(p[1] 0)  
// 34 result: VAR($tmpOpVar_18 18) : mult_a_a ? VAR($tmpOpVar_17 17)  VAR(y[3] 2)  
// 35 result: VAR($tmpOpVar_19 19) : mult_d_a ? CONST(-1.12)  VAR(y[4] 3)  
// 36 result: VAR($tmpOpVar_20 20) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_19 19)  
// 37 result: VAR($DER.y[4] 11) : plus_a_a ? VAR($tmpOpVar_16 16)  VAR($tmpOpVar_20 20)  
// 38 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[2] 1)  
// 39 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[4] 3)  
// 40 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(-10.03)  VAR(y[3] 2)  
// 41 result: VAR($tmpOpVar_19 19) : mult_d_a ? CONST(0.035)  VAR(y[5] 4)  
// 42 result: VAR($tmpOpVar_20 20) : plus_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_19 19)  
// 43 result: VAR($DER.y[3] 10) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_20 20)  
// 44 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[1] 0)  
// 45 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[1] 0)  
// 46 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(-8.75)  VAR(y[2] 1)  
// 47 result: VAR($DER.y[2] 9) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_18 18)  
// 48 result: VAR($tmpOpVar_16 16) : assign_p ? VAR(p[2] 1)  
// 49 result: VAR($tmpOpVar_17 17) : mult_a_a ? VAR($tmpOpVar_16 16)  VAR(y[2] 1)  
// 50 result: VAR($tmpOpVar_18 18) : mult_d_a ? CONST(8.32)  VAR(y[3] 2)  
// 51 result: VAR($tmpOpVar_19 19) : assign_p ? VAR(p[1] 0)  
// 52 result: VAR($tmpOpVar_20 20) : mult_a_a ? VAR($tmpOpVar_19 19)  VAR(y[1] 0)  
// 53 result: VAR($tmpOpVar_21 21) : min_a_a ? VAR($tmpOpVar_18 18)  VAR($tmpOpVar_20 20)  
// 54 result: VAR($tmpOpVar_22 22) : plus_a_a ? VAR($tmpOpVar_17 17)  VAR($tmpOpVar_21 21)  
// 55 result: VAR($DER.y[1] 8) : plus_d_a ? CONST(0.0007)  VAR($tmpOpVar_22 22)  
// ### OpeartionData : _adolcTest_f###
// 56 result: VAR(y 2) : mult_a_a ? VAR(x1 0)  VAR(x2 1)  
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'adolcTest', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-jacobian=adolcSparse'",
//     messages = "Simulation execution failed for model: adolcTest
// creating subtrace : tag(1), file = _adolcTest_f_aat.txt
// ADOL-C Warning: reading ascii trace creates no taylor stack
// Remember to run forward mode with correct setup first.
// ADOL-C Warning: reading ascii trace creates no taylor stack
// Remember to run forward mode with correct setup first.
// ADOL-C fatal error in indopro_forward_t (./uni5_for.c) : no such operation 59
// terminate called after throwing an instance of 'FatalError'
//   what():  errorcode=-1 function=indopro_forward_tight file=./uni5_for.c line=6563 what=
// Aborted (core dumped)
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// endResult
