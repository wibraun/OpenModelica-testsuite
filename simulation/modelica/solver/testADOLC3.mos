// name: testADOLC3
// status: correct
// teardown_command: rm -f adolcTest* output.log


loadString("
  model adolcTest
    Real x,y;
  algorithm
    y := sin(x);
    y := x*y;
  equation
    der(x) = y+time;
  end adolcTest;
");
getErrorString();

setCommandLineOptions("--adolcTrace");
getErrorString();

simulate(adolcTest, simflags="-jacobian=adolc");
getErrorString();

simulate(adolcTest, simflags="-jacobian=adolcSparse");
getErrorString();


// Result:
// true
// ""
// true
// ""
// createOperationData equations input: 
// <equation index="4">
//   <statement>
//     <defines name="y" />
//     <depends name="y" />
//     <depends name="x" />
//     <stmt>
//       y := $_start(y);
//       y := sin(x);
//       y := x * y;
//     </stmt>
//   </statement>
// </equation>
// <equation index="5">
//   <assign>
//     <defines name="der(x)"/>
//     <depends name="time" />
//     <depends name="y" />
//     <rhs>y + time</rhs>
//   </assign>
// </equation>
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : assign_p ? INDEX: 3 
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : sin_op ? VAR(x 0)  VAR($tmpOpVar_3 3)  
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : mult_a_a ? VAR(x 0)  VAR(y 2)  
// ### OpeartionData : adolcTest###
// 1 result: VAR(y 2) : assign_p ? INDEX: 3 
// 2 result: VAR(y 2) : sin_op ? VAR(x 0)  VAR($tmpOpVar_3 3)  
// 3 result: VAR(y 2) : mult_a_a ? VAR(x 0)  VAR(y 2)  
// 4 result: VAR($tmpOpVar_3 3) : assign_p ? TIME 
// 5 result: VAR($DER.x 1) : plus_a_a ? VAR(y 2)  VAR($tmpOpVar_3 3)  
// record SimulationResult
//     resultFile = "adolcTest_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'adolcTest', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-jacobian=adolc'",
//     messages = "ADOL-C Warning: reading ascii trace creates no taylor stack
// Remember to run forward mode with correct setup first.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// createOperationData equations input: 
// <equation index="4">
//   <statement>
//     <defines name="y" />
//     <depends name="y" />
//     <depends name="x" />
//     <stmt>
//       y := $_start(y);
//       y := sin(x);
//       y := x * y;
//     </stmt>
//   </statement>
// </equation>
// <equation index="5">
//   <assign>
//     <defines name="der(x)"/>
//     <depends name="time" />
//     <depends name="y" />
//     <rhs>y + time</rhs>
//   </assign>
// </equation>
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : assign_p ? INDEX: 3 
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : sin_op ? VAR(x 0)  VAR($tmpOpVar_3 3)  
//  start STMT_ASSIGN for y
// Done with collectOperationsForExp
//  ops: result: VAR(y 2) : mult_a_a ? VAR(x 0)  VAR(y 2)  
// ### OpeartionData : adolcTest###
// 1 result: VAR(y 2) : assign_p ? INDEX: 3 
// 2 result: VAR(y 2) : sin_op ? VAR(x 0)  VAR($tmpOpVar_3 3)  
// 3 result: VAR(y 2) : mult_a_a ? VAR(x 0)  VAR(y 2)  
// 4 result: VAR($tmpOpVar_3 3) : assign_p ? TIME 
// 5 result: VAR($DER.x 1) : plus_a_a ? VAR(y 2)  VAR($tmpOpVar_3 3)  
// record SimulationResult
//     resultFile = "adolcTest_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'adolcTest', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-jacobian=adolcSparse'",
//     messages = "ADOL-C Warning: reading ascii trace creates no taylor stack
// Remember to run forward mode with correct setup first.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// endResult
